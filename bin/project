#!/bin/bash
# @parseArger-begin
# @parseArger-help "generate or parse a project" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos name "project name"
# @parseArger pos target "specific stuff on a project" --optional --subcommand-directory "bin/_project" --subcommand --one-of "git-init" --one-of "installer" --one-of "git-init" --one-of "mkfile" --one-of "webserver"
# @parseArger opt description "project description" --alias project-help
# @parseArger opt directory "output directory, ./<project_name> by default" --short d --alias dir --complete "directory"
# @parseArger opt project-subcommand-dir "subcommand script directory" --default-value "bin" --alias subcommand-directory
# @parseArger opt project-subcommand "project subcommand, forces has-subcommand" --repeat
# @parseArger opt completely "generate bash completion, filenames (.yaml and .bash) if value is specified"
# @parseArger opt document "generate documentation, filename (.md) if value is specified" --default-value "on"
# @parseArger opt html-form "generate html-form, filename (.html) if value is specified" --default-value "on"
# @parseArger opt cp "file or directory to copy to the project directory" --repeat --complete "file" --complete "directory"
# @parseArger opt installer-git-service "git service" --default-value "github.com" --alias git-provider
# @parseArger opt installer-git-repo "git repo eg DimitriGilbert/parseArger" --alias git-repo
# @parseArger opt git-add "stuff to add to git" --repeat
# @parseArger opt git-commit "commit, force --git-add" --alias commit
# @parseArger flag readme "create a basic readme" --on
# @parseArger flag git "git init" --on
# @parseArger flag makefile "generate a makefile" --on
# @parseArger flag web-server "add web server" --on
# @parseArger flag bashunit "add bashunit lib to the project"
# @parseArger flag unit-tests "add unit tests to the project, forces --bashunit"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
_arg_target="";
_one_of_arg_target=("git-init" "installer" "git-init" "mkfile" "webserver" "webserver" );
_optional_positionals+=("_arg_target");
_arg_subcommand_arg="_arg_target";
__subcommand=();
# OPTIONALS ARGUMENTS
_arg_description=
_arg_directory=
_arg_project_subcommand_dir="bin"
_arg_project_subcommand=()
_arg_completely=
_arg_document="on"
_arg_html_form="on"
_arg_cp=()
_arg_installer_git_service="github.com"
_arg_installer_git_repo=
_arg_git_add=()
_arg_git_commit=
# FLAGS
_arg_readme="on"
_arg_git="on"
_arg_makefile="on"
_arg_web_server="on"
_arg_bashunit="off"
_arg_unit_tests="off"
# NESTED
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [ "$__cli_arg_count" -ge 2 ]; then
		# echo "$0 sub command help
	#"
		_triggerSCHelp=0;
		_helpHasBeenPrinted=0;
	else
	

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "generate or parse a project:"
	echo -e "	name: project name"
	echo -e "	target: specific stuff on a project, optional [one of 'git-init' 'installer' 'git-init' 'mkfile' 'webserver' 'webserver']"
	echo -e "	--description|--project-help <description>: project description"
	echo -e "	-d, --directory|--dir <directory>: output directory, ./<project_name> by default"
	echo -e "	--project-subcommand-dir|--subcommand-directory <project-subcommand-dir>: subcommand script directory [default: ' bin ']"
	echo -e "	--project-subcommand <project-subcommand>: project subcommand, forces has-subcommand, repeatable"
	echo -e "	--completely <completely>: generate bash completion, filenames (.yaml and .bash) if value is specified"
	echo -e "	--document <document>: generate documentation, filename (.md) if value is specified [default: ' on ']"
	echo -e "	--html-form <html-form>: generate html-form, filename (.html) if value is specified [default: ' on ']"
	echo -e "	--cp <cp>: file or directory to copy to the project directory, repeatable"
	echo -e "	--installer-git-service|--git-provider <installer-git-service>: git service [default: ' github.com ']"
	echo -e "	--installer-git-repo|--git-repo <installer-git-repo>: git repo eg DimitriGilbert/parseArger"
	echo -e "	--git-add <git-add>: stuff to add to git, repeatable"
	echo -e "	--git-commit|--commit <git-commit>: commit, force --git-add"
	echo -e "	--readme|--no-readme: create a basic readme, on by default (use --no-readme to turn it off)"
	echo -e "	--git|--no-git: git init, on by default (use --no-git to turn it off)"
	echo -e "	--makefile|--no-makefile: generate a makefile, on by default (use --no-makefile to turn it off)"
	echo -e "	--web-server|--no-web-server: add web server, on by default (use --no-web-server to turn it off)"
	echo -e "	--bashunit|--no-bashunit: add bashunit lib to the project"
	echo -e "	--unit-tests|--no-unit-tests: add unit tests to the project, forces --bashunit"
	echo -e "Usage :
	$0 <name> [target] [--description <value>] [--directory <value>] [--project-subcommand-dir <value>] [--project-subcommand <value>] [--completely <value>] [--document <value>] [--html-form <value>] [--cp <value>] [--installer-git-service <value>] [--installer-git-repo <value>] [--git-add <value>] [--git-commit <value>] [--[no-]readme] [--[no-]git] [--[no-]makefile] [--[no-]web-server] [--[no-]bashunit] [--[no-]unit-tests]";
	fi

	fi
	

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--project-help|--description)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_description="$2"
				shift
				;;
			--description=*)
				_arg_description="${_key##--description=}"
				;;
			--project-help=*)
				_arg_description="${_key##--project-help=}"
				;;
			
			-d|--dir|--directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			--dir=*)
				_arg_directory="${_key##--dir=}"
				;;
			-d*)
				_arg_directory="${_key##-d}"
				;;
			
			--subcommand-directory|--project-subcommand-dir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_project_subcommand_dir="$2"
				shift
				;;
			--project-subcommand-dir=*)
				_arg_project_subcommand_dir="${_key##--project-subcommand-dir=}"
				;;
			--subcommand-directory=*)
				_arg_project_subcommand_dir="${_key##--subcommand-directory=}"
				;;
			
			--project-subcommand)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_project_subcommand+=("$2")
				shift
				;;
			--project-subcommand=*)
				_arg_project_subcommand+=("${_key##--project-subcommand=}")
				;;
			
			--completely)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_completely="$2"
				shift
				;;
			--completely=*)
				_arg_completely="${_key##--completely=}"
				;;
			
			--document)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_document="$2"
				shift
				;;
			--document=*)
				_arg_document="${_key##--document=}"
				;;
			
			--html-form)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_html_form="$2"
				shift
				;;
			--html-form=*)
				_arg_html_form="${_key##--html-form=}"
				;;
			
			--cp)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_cp+=("$2")
				shift
				;;
			--cp=*)
				_arg_cp+=("${_key##--cp=}")
				;;
			
			--git-provider|--installer-git-service)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_installer_git_service="$2"
				shift
				;;
			--installer-git-service=*)
				_arg_installer_git_service="${_key##--installer-git-service=}"
				;;
			--git-provider=*)
				_arg_installer_git_service="${_key##--git-provider=}"
				;;
			
			--git-repo|--installer-git-repo)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_installer_git_repo="$2"
				shift
				;;
			--installer-git-repo=*)
				_arg_installer_git_repo="${_key##--installer-git-repo=}"
				;;
			--git-repo=*)
				_arg_installer_git_repo="${_key##--git-repo=}"
				;;
			
			--git-add)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_git_add+=("$2")
				shift
				;;
			--git-add=*)
				_arg_git_add+=("${_key##--git-add=}")
				;;
			
			--commit|--git-commit)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_git_commit="$2"
				shift
				;;
			--git-commit=*)
				_arg_git_commit="${_key##--git-commit=}"
				;;
			--commit=*)
				_arg_git_commit="${_key##--commit=}"
				;;
			
			--readme)
				_arg_readme="on"
				;;
			--no-readme)
				_arg_readme="off"
				;;
			--git)
				_arg_git="on"
				;;
			--no-git)
				_arg_git="off"
				;;
			--makefile)
				_arg_makefile="on"
				;;
			--no-makefile)
				_arg_makefile="off"
				;;
			--web-server)
				_arg_web_server="on"
				;;
			--no-web-server)
				_arg_web_server="off"
				;;
			--bashunit)
				_arg_bashunit="on"
				;;
			--no-bashunit)
				_arg_bashunit="off"
				;;
			--unit-tests)
				_arg_unit_tests="on"
				;;
			--no-unit-tests)
				_arg_unit_tests="off"
				;;
			-h|--help)
				print_help;
				;;
			-h*)
				print_help;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name _arg_target ";
	_leftovers_count=$((${#_positionals[@]} - 2))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
			
			if [ "$_arg_subcommand_arg" == "$_positional_name" ];then
				if [ -f "${1}" ] && command -v "${1}";then
					__subcommand+=("${1}");
				elif [ -f "$_SCRIPT_DIR/${1}" ] && command -v "$_SCRIPT_DIR/${1}";then
					__subcommand+=("$_SCRIPT_DIR/${1}");
				elif [[ "" == $(basename "$_SCRIPT_DIR")* ]];then
					cmdToSub="$(basename "$_SCRIPT_DIR")";
					cmdsubDir="";
					__subcommand+=("$_SCRIPT_DIR${cmdsubDir#"${cmdToSub}"}${1}");
				else
					__subcommand+=("$_SCRIPT_DIR/${1}");
				fi
			fi
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	target: ${_arg_target}";
	echo -e "	description: ${_arg_description}";
	echo -e "	directory: ${_arg_directory}";
	echo -e "	project-subcommand-dir: ${_arg_project_subcommand_dir}";
	echo -e "	project-subcommand: ${_arg_project_subcommand[*]}";
	echo -e "	completely: ${_arg_completely}";
	echo -e "	document: ${_arg_document}";
	echo -e "	html-form: ${_arg_html_form}";
	echo -e "	cp: ${_arg_cp[*]}";
	echo -e "	installer-git-service: ${_arg_installer_git_service}";
	echo -e "	installer-git-repo: ${_arg_installer_git_repo}";
	echo -e "	git-add: ${_arg_git_add[*]}";
	echo -e "	git-commit: ${_arg_git_commit}";
	echo -e "	readme: ${_arg_readme}";
	echo -e "	git: ${_arg_git}";
	echo -e "	makefile: ${_arg_makefile}";
	echo -e "	web-server: ${_arg_web_server}";
	echo -e "	bashunit: ${_arg_bashunit}";
	echo -e "	unit-tests: ${_arg_unit_tests}";
	echo -e "	leftovers: ${_arg_leftovers[*]}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


if [ "$_triggerSCHelp" == "0" ];then
	__subcommand+=("--help");
fi
if [ "$_verbose_level" -ne "0" ];then
	__subcommand+=("--verbose" "$_verbose_level");
fi

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end
source "$_SCRIPT_DIR/utils";

if [ "$_arg_target" != "" ]; then
	__subcommand+=("$_arg_name");
	log "${__subcommand[*]}" 2;
	__subcommand+=("${_arg_leftovers[@]}");
	if [ "$_arg_installer_git_repo" != "" ]; then
		__subcommand+=("--git-repo" "$_arg_installer_git_repo");
	fi
	"${__subcommand[@]}";
elif [ "$_helpHasBeenPrinted" == "0" ]; then
	print_help;
else
	if [ "$_arg_directory" == "" ]; then
		log "No directory specified" 3;
		_arg_directory="$(pwd)/$_arg_name";
	fi

	if [ "$_arg_description" == "" ]; then
		log "No description specified" 3;
		_arg_description="$_arg_name, a ParseArger project";
	fi

	if [ ! -d "$_arg_directory" ]; then
		log "Creating $_arg_directory" 2;
		mkdir -p "$_arg_directory";
	fi

	cd "$_arg_directory";

	paBin="$_SCRIPT_DIR/../parseArger";

	mainBin="$_arg_name"
	genMainCmd=("$paBin" generate --help-message "$_arg_description" --output "$mainBin");

	if [ "${#_arg_project_subcommand[@]}" -gt 0 ]; then
		log "Generating subcommands" 4;
		
		if [ ! -d "./${_arg_project_subcommand_dir}" ]; then
			log "Creating ./${_arg_project_subcommand_dir}" 2;
			mkdir -p "./${_arg_project_subcommand_dir}";
		fi
		
		genMainCmd+=(--leftovers 
			--pos "target '$_arg_name subcommand' --subcommand-use-leftovers --subcommand-run --subcommand-directory '${_arg_project_subcommand_dir}'"
		);
		
		for sbcmd in "${_arg_project_subcommand[@]}"; do
			if [ ! -f "./${_arg_project_subcommand_dir}/$sbcmd" ]; then
				log "Generating ./${_arg_project_subcommand_dir}/$sbcmd" 1;
				"$paBin" generate --help-message "$_arg_name $sbcmd command" --output "./${_arg_project_subcommand_dir}/$sbcmd";
			else 
				log "Parsing ./${_arg_project_subcommand_dir}/$sbcmd" 1;
				"$paBin" parse -i "./${_arg_project_subcommand_dir}/$sbcmd";
			fi
		done

	fi

	if [ "${#_arg_cp[@]}" -gt 0 ]; then
		log "Copying files and directories" 4;
		for cp in "${_arg_cp[@]}"; do
			if [ -d "$cp" ]; then
				log "copying directory $cp" 2;
				cp -r "$cp" "./";
			elif [ -f "$cp" ]; then
				log "copying $cp" 2;
				cp "$cp" "./"
			else
				log "No such file or directory :\n$cp" -1;
			fi
		done
	fi

	if [ ! -f "$mainBin" ]; then
		log "Generating main command" 4;
		log "${genMainCmd[*]}" 1;
		"${genMainCmd[@]}";
	else 
		log "Parsing main command" 4;
		"$paBin" parse -i "$mainBin";
	fi

	if [ "$_arg_completely" != "" ]; then
		log "Generating completions" 4;
		pacCmd=("$paBin" completely "$_arg_name" "$mainBin");
		if [ "$_arg_completely" != "on" ]; then
			pacCmd+=(--yaml-file  "${_arg_completely}.yaml" --completion-file "${_arg_completely}.bash");
		fi
		log "${pacCmd[*]}" 1;
		"${pacCmd[@]}";
	fi

	if [ "$_arg_document" != "" ]; then
		log "Generating documentation" 4;
		if [ "$_arg_document" == "on" ]; then
			_arg_document="documentation";
		fi
		
		if [ ! -f "${_arg_document}.md" ]; then
			padCmd=("$paBin" document --file "./$mainBin" --out "${_arg_document}.md");

			log "${padCmd[*]}" 1;
			"${padCmd[@]}";
		else
			log "documentation already exists" -1;
		fi
	fi

	if [ "$_arg_html_form" != "" ]; then
		log "Generating html form" 4;
		if [ "$_arg_html_form" == "on" ]; then
			_arg_html_form="form";
		fi
		
		if [ ! -f "${_arg_html_form}.html" ]; then
			
			pahCmd=("$paBin" html-form "$mainBin" --output "${_arg_html_form}.html");

			log "${pahCmd[*]}" 1;
			"${pahCmd[@]}";
		else
			log "html form already exists" -1;
		fi
	fi

	if [ "$_arg_readme" != "off" ]; then
		log "Generating readme" 4;
		
		if [ ! -f "${_arg_readme}" ]; then
			echo -e "# $_arg_name\n\n$_arg_description\n" > readme.md;
		else
			log "readme already exists" -1;
		fi
	fi

	if [ "$_arg_makefile" == "on" ]; then
		log "Generating makefile" 4;
		if [ ! -f "makefile" ]; then
			genMkf=("$_SCRIPT_DIR/_project/mkfile" "$_arg_name");
			"${genMkf[@]}";
		else
			log "makefile already exists" -1;
		fi
	fi

	if [ "$_arg_web_server" == "on" ]; then
		log "Generating web server" 4;
		"$_SCRIPT_DIR/_project/webserver" "$_arg_name";
	fi

	if [ "$_arg_installer_git_repo" != "" ]; then
		log "Generating installer" 4;
		genIns=("$_SCRIPT_DIR/_project/installer" "$_arg_name" --git-service "$_arg_installer_git_service" --git-repo "$_arg_installer_git_repo" --parsearger "$paBin");
		"${genIns[@]}";
	fi

	if [ "$_arg_unit_tests" == "on" ]; then
		log "Generating unit tests" 4;
		mkdir tests;
		sed "${_SCRIPT_DIR}/../templates/test_file" \
			-e "s|__program_name__|$_arg_name|g" \
			-e "s|__bin_name__|$_arg_name|g" \
			-e "s|__program_name_upper__|${_arg_name^^}|g" >> "tests/000_${_arg_name}.test.sh";
		
		if [ "${#_arg_project_subcommand[@]}" -gt 0 ]; then
			_tfile_index=1;
			for sbcmd in "${_arg_project_subcommand[@]}"; do
				_t_name="${_arg_name}_${sbcmd}";
				sed "${_SCRIPT_DIR}/../templates/test_file" \
					-e "s|__program_name__|$_t_name|g" \
					-e "s|__bin_name__|$_arg_name $sbcmd|g" \
					-e "s|__program_name_upper__|${_t_name^^}|g" >> "tests/00${_tfile_index}_${_t_name}.test.sh";
				_tfile_index=$((_tfile_index + 1));
			done
		fi

		_arg_bashunit="on";
	fi

	if [ "$_arg_bashunit" != "off" ]; then
		log "Adding bashunit" 4;
		bashunitInstallStr=$(curl -s https://bashunit.typeddevs.com/install.sh | bash);
		log "$bashunitInstallStr" 4;
	fi

	if [ "$_arg_git" != "off" ] || [ "${#_arg_git_add[@]}" -gt 0 ] || [ "$_arg_git_commit" != "" ]; then
		log "Initializing git" 4;
		gitInc=("$_SCRIPT_DIR/_project/git-init");
		if [ "${#_arg_git_add[@]}" -gt 0 ]; then
			for add in "${_arg_git_add[@]}"; do
				gitInc+=(--add "$add");
			done
		fi
		if [ "$_arg_git_commit" != "" ]; then
			gitInc+=(--commit "'$_arg_git_commit'");
		fi
		"${gitInc[@]}";

		if [ "$_arg_installer_git_repo" != "" ]; then
			log "Adding remote origin" 4;
			git remote add origin "git@${_arg_installer_git_service}:${_arg_installer_git_repo}.git"
		fi
	fi
fi
