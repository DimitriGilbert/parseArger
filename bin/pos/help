#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([default-value],[d],[default value])
# ARG_POSITIONAL_SINGLE([arg-name],[positional argument name])
# ARG_POSITIONAL_SINGLE([description],[positional argument description])
# ARG_OPTIONAL_SINGLE([repeat-min],[],[minimum repeatition, forces --repeat],[1])
# ARG_OPTIONAL_SINGLE([repeat-max],[],[maximum repeatition, forces --repeat])
# ARG_OPTIONAL_REPEATED([one-of],[],[list of accepted values])
# ARG_OPTIONAL_BOOLEAN([repeat],[r],[repeatable])
# ARG_OPTIONAL_BOOLEAN([optional],[],[optional])
# ARG_OPTIONAL_BOOLEAN([subcommand],[],[this is a subcommand])
# ARG_DEFAULTS_POS([])
# ARG_HELP([<generate the parseArg parseable string for positional argument>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='drh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_arg_name=
_arg_description=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_default_value=
_arg_repeat_min="1"
_arg_repeat_max=
_arg_one_of=()
_arg_repeat="off"
_arg_optional="off"
_arg_subcommand="off"


print_help()
{
	printf '%s\n' "<generate the parseArg parseable string for positional argument>"
	printf 'Usage: %s [-d|--default-value <arg>] [--repeat-min <arg>] [--repeat-max <arg>] [--one-of <arg>] [-r|--(no-)repeat] [--(no-)optional] [--(no-)subcommand] [-h|--help] <arg-name> <description>\n' "$0"
	printf '\t%s\n' "<arg-name>: positional argument name"
	printf '\t%s\n' "<description>: positional argument description"
	printf '\t%s\n' "-d, --default-value: default value (no default)"
	printf '\t%s\n' "--repeat-min: minimum repeatition, forces --repeat (default: '1')"
	printf '\t%s\n' "--repeat-max: maximum repeatition, forces --repeat (no default)"
	printf '\t%s\n' "--one-of: list of accepted values (empty by default)"
	printf '\t%s\n' "-r, --repeat, --no-repeat: repeatable (off by default)"
	printf '\t%s\n' "--optional, --no-optional: optional (off by default)"
	printf '\t%s\n' "--subcommand, --no-subcommand: this is a subcommand (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--default-value)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_default_value="$2"
				shift
				;;
			--default-value=*)
				_arg_default_value="${_key##--default-value=}"
				;;
			-d*)
				_arg_default_value="${_key##-d}"
				;;
			--repeat-min)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repeat_min="$2"
				shift
				;;
			--repeat-min=*)
				_arg_repeat_min="${_key##--repeat-min=}"
				;;
			--repeat-max)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repeat_max="$2"
				shift
				;;
			--repeat-max=*)
				_arg_repeat_max="${_key##--repeat-max=}"
				;;
			--one-of)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_one_of+=("$2")
				shift
				;;
			--one-of=*)
				_arg_one_of+=("${_key##--one-of=}")
				;;
			-r|--no-repeat|--repeat)
				_arg_repeat="on"
				test "${1:0:5}" = "--no-" && _arg_repeat="off"
				;;
			-r*)
				_arg_repeat="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--no-optional|--optional)
				_arg_optional="on"
				test "${1:0:5}" = "--no-" && _arg_optional="off"
				;;
			--no-subcommand|--subcommand)
				_arg_subcommand="on"
				test "${1:0:5}" = "--no-" && _arg_subcommand="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'arg-name' and 'description'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_arg_name _arg_description "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
optHelp="${_arg_arg_name}: ${_arg_description}";

if [ "$_arg_repeat_min" -gt "1" ] || [ "$_arg_repeat_max" != "" ]; then
  _arg_repeat="on"
fi
if [ "$_arg_repeat" != "off" ]; then
  optHelp+=", repeatable (${_arg_repeat_min}-${_arg_repeat_max})";
fi

if [ "$_arg_optional" != "off" ]; then
	optHelp+=", optional";
fi

if [ "$_arg_default_value" != "" ]; then
	optHelp+=" [default: '${_arg_default_value}']";
fi

if [ "${#_arg_one_of[@]}" != "" ]; then
	optHelp+=" [one of";
	for _oof in "${_arg_one_of[@]}"; do
		optHelp+=" '$_oof'";
	done
	optHelp+="]";
fi

echo -e "\techo -e \"\t${optHelp}\"";

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
