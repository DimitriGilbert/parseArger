#!/bin/bash
# @parseArger-begin
# @parseArger-help "generate html form for a parsearger file" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger pos file "file to process"
# @parseArger opt command "command string, default to file "
# @parseArger opt action "form action"
# @parseArger opt form-class "form html class"
# @parseArger opt input-container-class "input container class" --default-value "form-group"
# @parseArger opt input-class "input class" --default-value "form-control"
# @parseArger opt label-class "label class" --default-value "form-label"
# @parseArger opt select-class "select class" --default-value "form-select"
# @parseArger opt checkbox-container-class "checkbox and radio class" --default-value "form-check" --alias radio-container-class
# @parseArger opt checkbox-class "checkbox and radio class" --default-value "form-check-input" --alias radio-class
# @parseArger opt checkbox-label-class "checkbox and radio label class" --default-value "form-check-label" --alias radio-label-class
# @parseArger opt parent-form "parent form for result"
# @parseArger flag form "display form" --on
# @parseArger flag button "display button" --on
# @parseArger flag js "create javascript, --no-js forces --no-result" --on
# @parseArger flag result "display result" --on
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_file="";
# OPTIONALS ARGUMENTS
_arg_command=
_arg_action=
_arg_form_class=
_arg_input_container_class="form-group"
_arg_input_class="form-control"
_arg_label_class="form-label"
_arg_select_class="form-select"
_arg_checkbox_container_class="form-check"
_arg_checkbox_class="form-check-input"
_arg_checkbox_label_class="form-check-label"
_arg_parent_form=
# FLAGS
_arg_form="on"
_arg_button="on"
_arg_js="on"
_arg_result="on"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "generate html form for a parsearger file:"
	echo -e "	file: file to process"
	echo -e "	--command <command>: command string, default to file "
	echo -e "	--action <action>: form action"
	echo -e "	--form-class <form-class>: form html class"
	echo -e "	--input-container-class <input-container-class>: input container class [default: ' form-group ']"
	echo -e "	--input-class <input-class>: input class [default: ' form-control ']"
	echo -e "	--label-class <label-class>: label class [default: ' form-label ']"
	echo -e "	--select-class <select-class>: select class [default: ' form-select ']"
	echo -e "	--checkbox-container-class|--radio-container-class <checkbox-container-class>: checkbox and radio class [default: ' form-check ']"
	echo -e "	--checkbox-class|--radio-class <checkbox-class>: checkbox and radio class [default: ' form-check-input ']"
	echo -e "	--checkbox-label-class|--radio-label-class <checkbox-label-class>: checkbox and radio label class [default: ' form-check-label ']"
	echo -e "	--parent-form <parent-form>: parent form for result"
	echo -e "	--form|--no-form: display form, on by default (use --no-form to turn it off)"
	echo -e "	--button|--no-button: display button, on by default (use --no-button to turn it off)"
	echo -e "	--js|--no-js: create javascript, --no-js forces --no-result, on by default (use --no-js to turn it off)"
	echo -e "	--result|--no-result: display result, on by default (use --no-result to turn it off)"
	echo -e "Usage :
	$0 <file> [--command <value>] [--action <value>] [--form-class <value>] [--input-container-class <value>] [--input-class <value>] [--label-class <value>] [--select-class <value>] [--checkbox-container-class <value>] [--checkbox-class <value>] [--checkbox-label-class <value>] [--parent-form <value>] [--[no-]form] [--[no-]button] [--[no-]js] [--[no-]result]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--command)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_command="$2"
				shift
				;;
			--command=*)
				_arg_command="${_key##--command=}"
				;;
			
			--action)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_action="$2"
				shift
				;;
			--action=*)
				_arg_action="${_key##--action=}"
				;;
			
			--form-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_form_class="$2"
				shift
				;;
			--form-class=*)
				_arg_form_class="${_key##--form-class=}"
				;;
			
			--input-container-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_input_container_class="$2"
				shift
				;;
			--input-container-class=*)
				_arg_input_container_class="${_key##--input-container-class=}"
				;;
			
			--input-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_input_class="$2"
				shift
				;;
			--input-class=*)
				_arg_input_class="${_key##--input-class=}"
				;;
			
			--label-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_label_class="$2"
				shift
				;;
			--label-class=*)
				_arg_label_class="${_key##--label-class=}"
				;;
			
			--select-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_select_class="$2"
				shift
				;;
			--select-class=*)
				_arg_select_class="${_key##--select-class=}"
				;;
			
			--radio-container-class|--checkbox-container-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_checkbox_container_class="$2"
				shift
				;;
			--checkbox-container-class=*)
				_arg_checkbox_container_class="${_key##--checkbox-container-class=}"
				;;
			--radio-container-class=*)
				_arg_checkbox_container_class="${_key##--radio-container-class=}"
				;;
			
			--radio-class|--checkbox-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_checkbox_class="$2"
				shift
				;;
			--checkbox-class=*)
				_arg_checkbox_class="${_key##--checkbox-class=}"
				;;
			--radio-class=*)
				_arg_checkbox_class="${_key##--radio-class=}"
				;;
			
			--radio-label-class|--checkbox-label-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_checkbox_label_class="$2"
				shift
				;;
			--checkbox-label-class=*)
				_arg_checkbox_label_class="${_key##--checkbox-label-class=}"
				;;
			--radio-label-class=*)
				_arg_checkbox_label_class="${_key##--radio-label-class=}"
				;;
			
			--parent-form)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_parent_form="$2"
				shift
				;;
			--parent-form=*)
				_arg_parent_form="${_key##--parent-form=}"
				;;
			
			--form)
				_arg_form="on"
				;;
			--no-form)
				_arg_form="off"
				;;
			--button)
				_arg_button="on"
				;;
			--no-button)
				_arg_button="off"
				;;
			--js)
				_arg_js="on"
				;;
			--no-js)
				_arg_js="off"
				;;
			--result)
				_arg_result="on"
				;;
			--no-result)
				_arg_result="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="file"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_file ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tfile: ${_arg_file}";
	echo -e "\tcommand: ${_arg_command}";
	echo -e "\taction: ${_arg_action}";
	echo -e "\tform-class: ${_arg_form_class}";
	echo -e "\tinput-container-class: ${_arg_input_container_class}";
	echo -e "\tinput-class: ${_arg_input_class}";
	echo -e "\tlabel-class: ${_arg_label_class}";
	echo -e "\tselect-class: ${_arg_select_class}";
	echo -e "\tcheckbox-container-class: ${_arg_checkbox_container_class}";
	echo -e "\tcheckbox-class: ${_arg_checkbox_class}";
	echo -e "\tcheckbox-label-class: ${_arg_checkbox_label_class}";
	echo -e "\tparent-form: ${_arg_parent_form}";
	echo -e "\tform: ${_arg_form}";
	echo -e "\tbutton: ${_arg_button}";
	echo -e "\tjs: ${_arg_js}";
	echo -e "\tresult: ${_arg_result}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "$_SCRIPT_DIR/utils";

_psthrcmncls=( "--input-container-class" "${_arg_input_container_class}" "--input-class" "${_arg_input_class}" "--label-class" "${_arg_label_class}" "--select-class" "${_arg_select_class}")
_psthrfrmcls=()
if [ "$_arg_form_class" != "" ]; then
	_psthrfrmcls=( "--form-class" "${_arg_form_class}")
fi
_psthrcbxcls=( "--checkbox-container-class" "${_arg_checkbox_container_class}" "--checkbox-class" "${_arg_checkbox_class}" "--checkbox-label-class" "${_arg_checkbox_label_class}")

if [ "$_arg_command" == "" ]; then
	_arg_command="$_arg_file";
fi

_pos=();
_opt=();
_flag=();
parsearger_get_pos _pos "$_arg_file";
parsearger_get_opt _opt "$_arg_file";
parsearger_get_flag _flag "$_arg_file";

_frmName="${_arg_file//\//_}";
_frmName="${_frmName//./_}";
_frmName="${_frmName// /_}";
_frmName="${_frmName//:/_}";
_frmName="${_frmName//-/_}";

output="";

if [ "$_arg_form" != "off" ]; then
	output+="<form id=\"${_frmName}\"";
	if [ "$_arg_form_class" != "" ]; then
		output+=" class=\"${_arg_form_class}\"";
	fi
	output+=">\n<h2>${_arg_command} form</h2>\n";
fi
_subcmd="";
for _ipos in "${_pos[@]}"; do
	if [ "$_ipos" != "" ]; then
		isscmd="$(eval "$_SCRIPT_DIR/pos/is-subcmd $_ipos")";
		if [[ "$isscmd" == "0" ]]; then
			_subcmd="$_ipos"
		fi
		output+="$(eval "$_SCRIPT_DIR/pos/html ${_ipos} ${_psthrcmncls[*]} ${_psthrcbxcls[*]} ${_psthrfrmcls[*]}")";
	fi
done
for _iopt in "${_opt[@]}"; do
	if [ "$_iopt" != "" ]; then
		output+="$(eval "$_SCRIPT_DIR/opt/html ${_iopt} ${_psthrcmncls[*]}")";
	fi
done
for _iflag in "${_flag[@]}"; do
	if [ "$_iflag" != "" ]; then
		output+="$(eval "$_SCRIPT_DIR/flag/html ${_iflag} ${_psthrcbxcls[*]}")";
	fi
done

if [ "$_arg_form" != "off" ]; then
	if [ "$_arg_button" != "off" ]; then
		output+="<button id=\"${_frmName}_parse_btn\">Parse</button>";
	fi
	if [ "$_arg_result" != "off" ]; then
		output+="\n\t<pre id=\"${_frmName}_result\"></pre>";
	fi
	output+="\n</form>";
	if [ "${_subcmd}" != "" ]; then
		output+="$(eval "$_SCRIPT_DIR/pos/subcmd-html ${_ipos} ${_psthrcmncls[*]} ${_psthrcbxcls[*]} ${_psthrfrmcls[*]} --parent-form \"${_frmName}\"")"
	fi
fi


if [ "$_arg_js" != "off" ]; then
	output+="\n<script type=\"text/javascript\">
	function ${_frmName}_parse(__form) { 
		let ${_frmName}_frm = new FormData(__form);
		let out = '${_arg_command}';
		for(const inp of ${_frmName}_frm.keys()) {
			const ielt = document.getElementById(inp);
			switch(ielt.getAttribute('pa-type')) {
				case 'pos':
					out+=' '+${_frmName}_frm.get(inp);
					break;
				case 'opt':
					if(${_frmName}_frm.get(inp) !== '') {
						if (ielt.hasAttribute('pa-repeat')) {
							for(const val of ${_frmName}_frm.get(inp).split(\`
\`)) {
								out+=' --'+inp+' '+val;
							}
						} else {
							out+=' --'+inp+' '+${_frmName}_frm.get(inp);
						}
					}
					break;
				case 'flag':
					if(ielt.checked === true) {
						out+=' --'+inp;
					} else {
						out+=' --no-'+inp;
					}
					break;
			}
		}";
		if [ "$_arg_parent_form" != "" ]; then
			output+="
		document.getElementById('${_arg_parent_form}_parse_btn').dispatchEvent(new Event('click'));
		out=document.getElementById('${_arg_parent_form}_result').innerHTML+' '+out;
		";
		fi
		output+="
		document.getElementById('${_frmName}_result').innerHTML=out;
	}";
	if [ "$_arg_result" != "off" ] && [ "$_arg_form" != "off" ]; then
		output+="\ndocument.getElementById('${_frmName}').addEventListener('submit', function(e) {
				e.preventDefault();
				e.target.checkValidity();
				${_frmName}_parse(e.target);
			});";
	fi
	output+="\n</script>";
fi


echo -e "$output";
