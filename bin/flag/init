#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([short],[s],[short option])
# ARG_OPTIONAL_SINGLE([template])
# ARG_OPTIONAL_BOOLEAN([on],[],[flag on by default])
# ARG_POSITIONAL_SINGLE([arg-name],[flag name])
# ARG_POSITIONAL_SINGLE([description],[flag description])
# ARG_DEFAULTS_POS([])
# ARG_HELP([generate the parseArg init string for flag])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_arg_name=
_arg_description=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_short=
_arg_template=
_arg_on="off"


print_help()
{
	printf '%s\n' "generate the parseArg init string for flag"
	printf 'Usage: %s [-s|--short <arg>] [--template <arg>] [--(no-)on] [-h|--help] <arg-name> <description>\n' "$0"
	printf '\t%s\n' "<arg-name>: flag name"
	printf '\t%s\n' "<description>: flag description"
	printf '\t%s\n' "-s, --short: short option (no default)"
	printf '\t%s\n' "--on, --no-on: flag on by default (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--short)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_short="$2"
				shift
				;;
			--short=*)
				_arg_short="${_key##--short=}"
				;;
			-s*)
				_arg_short="${_key##-s}"
				;;
			--template)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_template="$2"
				shift
				;;
			--template=*)
				_arg_template="${_key##--template=}"
				;;
			--no-on|--on)
				_arg_on="on"
				test "${1:0:5}" = "--no-" && _arg_on="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'arg-name' and 'description'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_arg_name _arg_description "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

outStr="_arg_${_arg_arg_name//-/_}=";

if [ "$_arg_on" == "on" ]; then
  outStr+="\"on\"";
else
  outStr+="\"off\"";
fi

echo -e "$outStr";

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
