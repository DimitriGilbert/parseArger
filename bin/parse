#!/bin/bash
# @parseArger-begin
# @parseArger-help "parse an existing parseArger file" --option "help" --short-option "h"
# @parseArger-version "0.1" --option "version" --short-option "v"
# @parseArger-declarations
# @parseArger pos file "file to parse"
# @parseArger opt pos "add positional argument declaration" --short p --repeat
# @parseArger opt opt "add optional arg declaration" --short o --repeat
# @parseArger opt flag "add flag declaration" --short f --repeat
# @parseArger opt set "add declare var" --short s --repeat
# @parseArger opt source "add file to source" --short l --repeat
# @parseArger opt set-version "set version"
# @parseArger flag inplace "replace parseArger generated content in place" --short i
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo -e "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_file="";
# OPTIONALS ARGUMENTS
_arg_pos=()
_arg_opt=()
_arg_flag=()
_arg_set=()
_arg_source=()
_arg_set_version=
# FLAGS
_arg_inplace="off"


print_help()
{

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "parse an existing parseArger file:"
	echo -e "	file: file to parse"
	echo -e "	-p, --pos <pos>: add positional argument declaration, repeatable"
	echo -e "	-o, --opt <opt>: add optional arg declaration, repeatable"
	echo -e "	-f, --flag <flag>: add flag declaration, repeatable"
	echo -e "	-s, --set <set>: add declare var, repeatable"
	echo -e "	-l, --source <source>: add file to source, repeatable"
	echo -e "	--set-version <set-version>: set version"
	echo -e "	-i|--inplace|--no-inplace: replace parseArger generated content in place"
	echo -e "Usage :
	$0 <file> [--pos <value>] [--opt <value>] [--flag <value>] [--set <value>] [--source <value>] [--set-version <value>] [--[no-]inplace]";
	fi

}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--pos)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_pos+=("$2")
				shift
				;;
			--pos=*)
				_arg_pos+=("${_key##--pos=}")
				;;
			-p*)
				_arg_pos+=("${_key##-p}")
				;;
			
			-o|--opt)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_opt+=("$2")
				shift
				;;
			--opt=*)
				_arg_opt+=("${_key##--opt=}")
				;;
			-o*)
				_arg_opt+=("${_key##-o}")
				;;
			
			-f|--flag)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_flag+=("$2")
				shift
				;;
			--flag=*)
				_arg_flag+=("${_key##--flag=}")
				;;
			-f*)
				_arg_flag+=("${_key##-f}")
				;;
			
			-s|--set)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set+=("$2")
				shift
				;;
			--set=*)
				_arg_set+=("${_key##--set=}")
				;;
			-s*)
				_arg_set+=("${_key##-s}")
				;;
			
			-l|--source)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_source+=("$2")
				shift
				;;
			--source=*)
				_arg_source+=("${_key##--source=}")
				;;
			-l*)
				_arg_source+=("${_key##-l}")
				;;
			
			--set-version)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set_version="$2"
				shift
				;;
			--set-version=*)
				_arg_set_version="${_key##--set-version=}"
				;;
			
			-i|--inplace)
				_arg_inplace="on"
				;;
			--no-inplace)
				_arg_inplace="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="file"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').
	${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_file ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tfile: ${_arg_file}";
	echo -e "\tpos: ${_arg_pos[*]}";
	echo -e "\topt: ${_arg_opt[*]}";
	echo -e "\tflag: ${_arg_flag[*]}";
	echo -e "\tset: ${_arg_set[*]}";
	echo -e "\tsource: ${_arg_source[*]}";
	echo -e "\tset-version: ${_arg_set_version}";
	echo -e "\tinplace: ${_arg_inplace}";

}

print_version()
{
	echo "0.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

SCRIPT_ROOT_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd -P
);

parseHelpMessage() {
	echo "$1";
}

paStart="# @parse"
paStart+="Arger"

_help="$(sed -ne 's/'"${paStart}"'-help \(.*\).*/\1/p' "$_arg_file")"
_version="$(sed -ne 's/'"${paStart}"'-version \(.*\).*/\1/p' "$_arg_file")"
readarray -t _set <<< "$(sed -ne 's/'"${paStart}"'-set \(.*\).*/\1/p' "$_arg_file")"
_leftovers="$(sed -ne 's/'"${paStart}"'-leftovers \(.*\).*/\1/p' "$_arg_file")"
readarray -t _source <<< "$(sed -ne 's/'"${paStart}"'-source \(.*\).*/\1/p' "$_arg_file")"
readarray -t _pos <<< "$(sed -ne 's/'"${paStart}"' pos \(.*\).*/\1/p' "$_arg_file")"
readarray -t _opt <<< "$(sed -ne 's/'"${paStart}"' opt \(.*\).*/\1/p' "$_arg_file")"
readarray -t _flag <<< "$(sed -ne 's/'"${paStart}"' flag \(.*\).*/\1/p' "$_arg_file")"

# echo "_help: $_help";
# echo "_set: ${_set[@]}";
# echo "_leftovers: $_leftovers";
# echo "_pos: ${_pos[@]}";
# echo "_opt: ${_opt[@]}";
# echo "_flag: ${_flag[@]}";

cmdGen=("--no-bang");

if [[ "${_arg_set_version}" != "" ]]; then
	# TODO: get versopn opt name and short
	cmdGen+=("--set-version" "${_arg_set_version}");
elif [[ "${_version}" != "" ]]; then
	_version="--set-version ${_version//--option/--version-opt-name}";
	_version="${_version//--short-option/--version-short-option}";
	_version="${_version//\"/}";
	# echo "$_version";
	read -a vergen <<< "$_version";
	cmdGen+=("${vergen[@]}");
fi

if [ "$_help" != "" ]; then
  cmdGen+=("--help-message" "$(eval "parseHelpMessage $_help")");
fi

if [ "${_set[*]}" != "" ] && [ "${#_set[@]}" -gt "0" ]; then
  for __set in "${_set[@]}"; do
    cmdGen+=("--set" "$__set");
  done
fi
if [[ "${#_arg_set[@]}" -gt 0 ]]; then
	for __n_set in "${_arg_set[@]}"; do
		cmdGen+=("--set" "$__n_set")
	done
fi

if [ "${_source[*]}" != "" ] && [ "${#_source[@]}" -gt "0" ]; then
  for __source in "${_source[@]}"; do
    cmdGen+=("--source" "$__source");
  done
fi
if [[ "${#_arg_source[@]}" -gt 0 ]]; then
	for __n_source in "${_arg_source[@]}"; do
		cmdGen+=("--source" "$__n_source")
	done
fi

if [ "$_leftovers" != "" ]; then
  cmdGen+=("--leftovers" "--leftovers-name" "$_leftovers");
fi

if [ "${_pos[*]}" != "" ] && [ "${#_pos[@]}" -gt "0" ]; then
  for __pos in "${_pos[@]}"; do
    cmdGen+=("--pos" "$__pos");
  done
fi
if [[ "${#_arg_pos[@]}" -gt 0 ]]; then
	for __n_pos in "${_arg_pos[@]}"; do
		cmdGen+=("--pos" "$__n_pos")
	done
fi

if [ "${_opt[*]}" != "" ] && [ "${#_opt[@]}" -gt "0" ]; then
  for __opt in "${_opt[@]}"; do
    cmdGen+=("--opt" "$__opt");
  done
fi
if [[ "${#_arg_opt[@]}" -gt 0 ]]; then
	for __n_opt in "${_arg_opt[@]}"; do
		cmdGen+=("--opt" "$__n_opt")
	done
fi

if [ "${_flag[*]}" != "" ] && [ "${#_flag[@]}" -gt "0" ]; then
  for __flag in "${_flag[@]}"; do
    cmdGen+=("--flag" "$__flag");
  done
fi
if [[ "${#_arg_flag[@]}" -gt 0 ]]; then
	for __n_flag in "${_arg_flag[@]}"; do
		cmdGen+=("--flag" "$__n_flag")
	done
fi

tmpGen="$(mktemp)";
"$SCRIPT_ROOT_DIR/generate" "${cmdGen[@]}" > "$tmpGen";

tmpMrk="tmpMrk"
tmpMrk="___${tmpMrk}___parsearger"
# https://unix.stackexchange.com/a/485670 <3
parsedGen="$(sed -e "/${paStart}-end/a ${tmpMrk}" -e "/${paStart}-begin/,/${paStart}-end/d" "$_arg_file" | sed -e "/${tmpMrk}/r ${tmpGen}" -e "/${tmpMrk}/d")";

rm "$tmpGen";

if [ "$_arg_inplace" == "on" ]; then
  echo "$parsedGen" > "$_arg_file";
else 
  echo "$parsedGen";
fi
