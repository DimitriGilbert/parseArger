#!/bin/bash

# @parseArger-begin
# @parseArger-help "create common verbose stuff" --option "help" --short-option "h"
# @parseArger-version "0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger opt option "verbose trigger option" --default-value "verbose"
# @parseArger opt level "verbose default level" --default-value "0"
# @parseArger opt log-fn-name "log function name" --default-value "log"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo -e "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_option="verbose"
_arg_level="0"
_arg_log_fn_name="log"
# FLAGS
_verbose_level="0";



print_help()
{

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "create common verbose stuff:"
	echo -e "	--option <option>: verbose trigger option [default: ' verbose ']"
	echo -e "	--level <level>: verbose default level [default: ' 0 ']"
	echo -e "	--log-fn-name <log-fn-name>: log function name [default: ' log ']"
	echo -e "Usage :
	$0 [--option <value>] [--level <value>] [--log-fn-name <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		# TODO handle colors
		echo "${_arg_msg}";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--option)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_option="$2"
				shift
				;;
			--option=*)
				_arg_option="${_key##--option=}"
				;;
			
			--level)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_level="$2"
				shift
				;;
			--level=*)
				_arg_level="${_key##--level=}"
				;;
			
			--log-fn-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_log_fn_name="$2"
				shift
				;;
			--log-fn-name=*)
				_arg_log_fn_name="${_key##--log-fn-name=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\toption: ${_arg_option}";
	echo -e "\tlevel: ${_arg_level}";
	echo -e "\tlog-fn-name: ${_arg_log_fn_name}";

}

print_version()
{
	echo "0.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

outStr="# @parse";
outStr+="Arger-verbose --option \"$_arg_option\" --level \"$_arg_level\"";

echo "$outStr";
