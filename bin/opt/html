#!/bin/bash
# @parseArger-begin
# @parseArger-help "option to html form" --option "help" --short-option "h"
# @parseArger-version "0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger pos arg-name "positional argument name"
# @parseArger pos description "positional argument description"
# @parseArger opt repeat-min "minimum repeatition forces repeat" --default-value "1"
# @parseArger opt repeat-max "maximum repeatition forces repeat"
# @parseArger opt one-of "accepted values" --repeat
# @parseArger opt default-value "value" --short d --repeat
# @parseArger opt short "short form" --short s
# @parseArger opt alias "option alias" --repeat
# @parseArger opt empty-value "value for empty option"
# @parseArger opt complete "bash built-in completely function" --repeat
# @parseArger opt complete-custom "completely custom dynamic suggestion" --repeat
# @parseArger opt input-container-class "input container class" --default-value "form-group"
# @parseArger opt input-class "input class" --default-value "form-control"
# @parseArger opt label-class "label class" --default-value "form-label"
# @parseArger opt select-class "select class" --default-value "form-select"
# @parseArger flag repeat "repeatable" --short r
# @parseArger flag empty "use option as flag"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_arg_name="";
_arg_description="";
# OPTIONALS ARGUMENTS
_arg_repeat_min="1"
_arg_repeat_max=
_arg_one_of=()
_arg_default_value=()
_arg_short=
_arg_alias=()
_arg_empty_value=
_arg_complete=()
_arg_complete_custom=()
_arg_input_container_class="form-group"
_arg_input_class="form-control"
_arg_label_class="form-label"
_arg_select_class="form-select"
# FLAGS
_arg_repeat="off"
_arg_empty="off"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "option to html form:"
	echo -e "	arg-name: positional argument name"
	echo -e "	description: positional argument description"
	echo -e "	--repeat-min <repeat-min>: minimum repeatition forces repeat [default: ' 1 ']"
	echo -e "	--repeat-max <repeat-max>: maximum repeatition forces repeat"
	echo -e "	--one-of <one-of>: accepted values, repeatable"
	echo -e "	-d, --default-value <default-value>: value, repeatable"
	echo -e "	-s, --short <short>: short form"
	echo -e "	--alias <alias>: option alias, repeatable"
	echo -e "	--empty-value <empty-value>: value for empty option"
	echo -e "	--complete <complete>: bash built-in completely function, repeatable"
	echo -e "	--complete-custom <complete-custom>: completely custom dynamic suggestion, repeatable"
	echo -e "	--input-container-class <input-container-class>: input container class [default: ' form-group ']"
	echo -e "	--input-class <input-class>: input class [default: ' form-control ']"
	echo -e "	--label-class <label-class>: label class [default: ' form-label ']"
	echo -e "	--select-class <select-class>: select class [default: ' form-select ']"
	echo -e "	-r|--repeat|--no-repeat: repeatable"
	echo -e "	--empty|--no-empty: use option as flag"
	echo -e "Usage :
	$0 <arg-name> <description> [--repeat-min <value>] [--repeat-max <value>] [--one-of <value>] [--default-value <value>] [--short <value>] [--alias <value>] [--empty-value <value>] [--complete <value>] [--complete-custom <value>] [--input-container-class <value>] [--input-class <value>] [--label-class <value>] [--select-class <value>] [--[no-]repeat] [--[no-]empty]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--repeat-min)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_repeat_min="$2"
				shift
				;;
			--repeat-min=*)
				_arg_repeat_min="${_key##--repeat-min=}"
				;;
			
			--repeat-max)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_repeat_max="$2"
				shift
				;;
			--repeat-max=*)
				_arg_repeat_max="${_key##--repeat-max=}"
				;;
			
			--one-of)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_one_of+=("$2")
				shift
				;;
			--one-of=*)
				_arg_one_of+=("${_key##--one-of=}")
				;;
			
			-d|--default-value)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_default_value+=("$2")
				shift
				;;
			--default-value=*)
				_arg_default_value+=("${_key##--default-value=}")
				;;
			-d*)
				_arg_default_value+=("${_key##-d}")
				;;
			
			-s|--short)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_short="$2"
				shift
				;;
			--short=*)
				_arg_short="${_key##--short=}"
				;;
			-s*)
				_arg_short="${_key##-s}"
				;;
			
			--alias)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_alias+=("$2")
				shift
				;;
			--alias=*)
				_arg_alias+=("${_key##--alias=}")
				;;
			
			--empty-value)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_empty_value="$2"
				shift
				;;
			--empty-value=*)
				_arg_empty_value="${_key##--empty-value=}"
				;;
			
			--complete)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_complete+=("$2")
				shift
				;;
			--complete=*)
				_arg_complete+=("${_key##--complete=}")
				;;
			
			--complete-custom)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_complete_custom+=("$2")
				shift
				;;
			--complete-custom=*)
				_arg_complete_custom+=("${_key##--complete-custom=}")
				;;
			
			--input-container-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_input_container_class="$2"
				shift
				;;
			--input-container-class=*)
				_arg_input_container_class="${_key##--input-container-class=}"
				;;
			
			--input-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_input_class="$2"
				shift
				;;
			--input-class=*)
				_arg_input_class="${_key##--input-class=}"
				;;
			
			--label-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_label_class="$2"
				shift
				;;
			--label-class=*)
				_arg_label_class="${_key##--label-class=}"
				;;
			
			--select-class)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_select_class="$2"
				shift
				;;
			--select-class=*)
				_arg_select_class="${_key##--select-class=}"
				;;
			
			-r|--repeat)
				_arg_repeat="on"
				;;
			--no-repeat)
				_arg_repeat="off"
				;;
			--empty)
				_arg_empty="on"
				;;
			--no-empty)
				_arg_empty="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="arg-name description"
	if [ "${_positionals_count}" -gt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_arg_name _arg_description ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\targ-name: ${_arg_arg_name}";
	echo -e "\tdescription: ${_arg_description}";
	echo -e "\trepeat-min: ${_arg_repeat_min}";
	echo -e "\trepeat-max: ${_arg_repeat_max}";
	echo -e "\tone-of: ${_arg_one_of[*]}";
	echo -e "\tdefault-value: ${_arg_default_value[*]}";
	echo -e "\tshort: ${_arg_short}";
	echo -e "\talias: ${_arg_alias[*]}";
	echo -e "\tempty-value: ${_arg_empty_value}";
	echo -e "\tcomplete: ${_arg_complete[*]}";
	echo -e "\tcomplete-custom: ${_arg_complete_custom[*]}";
	echo -e "\tinput-container-class: ${_arg_input_container_class}";
	echo -e "\tinput-class: ${_arg_input_class}";
	echo -e "\tlabel-class: ${_arg_label_class}";
	echo -e "\tselect-class: ${_arg_select_class}";
	echo -e "\trepeat: ${_arg_repeat}";
	echo -e "\tempty: ${_arg_empty}";

}

print_version()
{
	echo "0.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

inptCmn="pa-type=\"opt\" name=\"${_arg_arg_name}\" id=\"${_arg_arg_name}\"";

if [ "${#_arg_one_of[@]}" -gt 0 ]; then
	inpuStr="<select class=\" class=\"${_arg_select_class}\"\" ${inptCmn}>\n";
	for oof in "${_arg_one_of[@]}"; do
		inpuStr+="\n\t\t<option value=\"${oof}\"";
		if [ "${#_arg_default_value[@]}" -gt 0 ] && [ "${_arg_default_value[0]}" == "$oof" ]; then
			inpuStr+=" selected";
		fi
		inpuStr+=">${oof}</option>";
	done
	inpuStr+="\n\t</select>";
elif [ "${_arg_repeat}" == "on" ]; then
	inpuStr="<textarea ${inptCmn} type=\"text\" pa-repeat class=\"${_arg_input_class}\">";
	if [ "${#_arg_default_value[@]}" -gt 0 ]; then
		inpuStr+="${_arg_default_value[0]}";
	fi
	inpuStr+="</textarea>";
else
	inpuStr="<input class=\"${_arg_input_class}\" ${inptCmn} type=\"text\"";
	if [ "${#_arg_default_value[@]}" -gt 0 ]; then
		inpuStr+=" value=\"${_arg_default_value[0]}\"";
	fi
	inpuStr+=" />";
fi

echo -e "<div class=\"${_arg_input_container_class}\">
	<label for=\"${_arg_arg_name}\" class=\"${_arg_label_class}\">${_arg_arg_name}</label>
	<span class=\"input-help\">${_arg_description}</span>
	${inpuStr}
</div>";
