#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_REPEATED([pos],[],[positional arguments declarations])
# ARG_OPTIONAL_REPEATED([opt],[],[optionnal arguments declarations])
# ARG_OPTIONAL_REPEATED([flag],[],[flags declarations])
# ARG_OPTIONAL_REPEATED([set],[],[variable declarations])
# ARG_OPTIONAL_REPEATED([source],[],[file to source])
# ARG_OPTIONAL_SINGLE([help-message],[],[general help message for the script],[I send an SOS to the world])
# ARG_OPTIONAL_SINGLE([help-option],[],[option to trigger for the script])
# ARG_OPTIONAL_SINGLE([help-short-option],[],[option to trigger for the script])
# ARG_OPTIONAL_SINGLE([leftovers-name],[],[extra arguments variable name],[leftovers])
# ARG_OPTIONAL_SINGLE([use-bang],[],[shebang executable],[/bin/bash])
# ARG_OPTIONAL_BOOLEAN([leftovers],[],[accept extra arguments])
# ARG_OPTIONAL_BOOLEAN([bang],[],[include shebang],[on])
# ARG_HELP([generate the parsing code])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_pos=()
_arg_opt=()
_arg_flag=()
_arg_set=()
_arg_source=()
_arg_help_message="I send an SOS to the world"
_arg_help_option=
_arg_help_short_option=
_arg_leftovers_name="leftovers"
_arg_use_bang="/bin/bash"
_arg_leftovers="off"
_arg_bang="on"


print_help()
{
	printf '%s\n' "generate the parsing code"
	printf 'Usage: %s [--pos <arg>] [--opt <arg>] [--flag <arg>] [--set <arg>] [--source <arg>] [--help-message <arg>] [--help-option <arg>] [--help-short-option <arg>] [--leftovers-name <arg>] [--use-bang <arg>] [--(no-)leftovers] [--(no-)bang] [-h|--help]\n' "$0"
	printf '\t%s\n' "--pos: positional arguments declarations (empty by default)"
	printf '\t%s\n' "--opt: optionnal arguments declarations (empty by default)"
	printf '\t%s\n' "--flag: flags declarations (empty by default)"
	printf '\t%s\n' "--set: variable declarations (empty by default)"
	printf '\t%s\n' "--source: file to source (empty by default)"
	printf '\t%s\n' "--help-message: general help message for the script (default: 'I send an SOS to the world')"
	printf '\t%s\n' "--help-option: option to trigger for the script (no default)"
	printf '\t%s\n' "--help-short-option: option to trigger for the script (no default)"
	printf '\t%s\n' "--leftovers-name: extra arguments variable name (default: 'leftovers')"
	printf '\t%s\n' "--use-bang: shebang executable (default: '/bin/bash')"
	printf '\t%s\n' "--leftovers, --no-leftovers: accept extra arguments (off by default)"
	printf '\t%s\n' "--bang, --no-bang: include shebang (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--pos)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pos+=("$2")
				shift
				;;
			--pos=*)
				_arg_pos+=("${_key##--pos=}")
				;;
			--opt)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_opt+=("$2")
				shift
				;;
			--opt=*)
				_arg_opt+=("${_key##--opt=}")
				;;
			--flag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_flag+=("$2")
				shift
				;;
			--flag=*)
				_arg_flag+=("${_key##--flag=}")
				;;
			--set)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_set+=("$2")
				shift
				;;
			--set=*)
				_arg_set+=("${_key##--set=}")
				;;
			--source)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_source+=("$2")
				shift
				;;
			--source=*)
				_arg_source+=("${_key##--source=}")
				;;
			--help-message)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_help_message="$2"
				shift
				;;
			--help-message=*)
				_arg_help_message="${_key##--help-message=}"
				;;
			--help-option)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_help_option="$2"
				shift
				;;
			--help-option=*)
				_arg_help_option="${_key##--help-option=}"
				;;
			--help-short-option)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_help_short_option="$2"
				shift
				;;
			--help-short-option=*)
				_arg_help_short_option="${_key##--help-short-option=}"
				;;
			--leftovers-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_leftovers_name="$2"
				shift
				;;
			--leftovers-name=*)
				_arg_leftovers_name="${_key##--leftovers-name=}"
				;;
			--use-bang)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_use_bang="$2"
				shift
				;;
			--use-bang=*)
				_arg_use_bang="${_key##--use-bang=}"
				;;
			--no-leftovers|--leftovers)
				_arg_leftovers="on"
				test "${1:0:5}" = "--no-" && _arg_leftovers="off"
				;;
			--no-bang|--bang)
				_arg_bang="on"
				test "${1:0:5}" = "--no-" && _arg_bang="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
SCRIPT_ROOT_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd -P
);

# var definitions
minPos="${#_arg_pos[@]}";
maxPos="${#_arg_pos[@]}";
reqPos=();
posNames=();
posArgNames=();
optNames=();
optArgNames=();
flagNames=();
flagArgNames=();

posI=0;
for pos in "${_arg_pos[@]}"; do
	posNames+=("$(echo "$pos" | head -n1 | cut -d " " -f1)");
	posArgNames+=("$(echo "$pos" | head -n1 | cut -d " " -f1 | sed 's/-/_/')");
	if [[ $pos =~ "--optional" ]]; then
		minPos=$((minPos-1));
	else
		reqPos+=("${posNames[$posI]}");
	fi
	# TODO
	# [ ] extract min-repeat value
	if [[ $pos =~ "--min-repeat" ]]; then
		minPos=$((minPos+1));
	fi
	# TODO
	# [ ] extract max-repeat value
	if [[ $pos =~ "--max-repeat" ]]; then
		maxPos=$((maxPos+1));
	fi
	posI=$((posI+1));
done
for opt in "${_arg_opt[@]}"; do
	optNames+=("$(echo "$opt" | head -n1 | cut -d " " -f1)");
	optArgNames+=("$(echo "$opt" | head -n1 | cut -d " " -f1) | sed 's/-/_/g'");
done
for flag in "${_arg_flag[@]}"; do
	flagNames+=("$(echo "$flag" | head -n1 | cut -d " " -f1)");
	flagArgNames+=("$(echo "$flag" | head -n1 | cut -d " " -f1) | sed 's/-/_/g'");
done

# generate shebang
if [ "$_arg_bang" != "off" ]; then
	echo "#!${_arg_use_bang}";
fi

# parsing
echo -e "# @parseArger-begin";

# help
helpDecArg=("$_arg_help_message");
if [ "$_arg_help_option" != "" ]; then
	helpDecArg+=("--option" "$_arg_help_option");
fi
if [ "$_arg_help_short_option" != "" ]; then
	helpDecArg+=("--short-option" "$_arg_help_short_option");
fi
"$SCRIPT_ROOT_DIR/help/declaration" "${helpDecArg[@]}";

# setting user variables
if [ "${#_arg_set[@]}" -gt 0 ]; then
	for _set in "${_arg_set[@]}"; do
		echo "# @parseArger-set $_set";
		echo -e "$_set";
	done
fi

# sourcing user files
if [ "${#_arg_source[@]}" -gt 0 ]; then
	for _source in "${_arg_source[@]}"; do
		echo "# @parseArger-source $_source";
		echo -e "source \"$_source\";";
	done
fi

# leftovers
if [ "$_arg_leftovers" == "on" ]; then
	echo -e "# @parseArger-leftovers $_arg_leftovers_name";
fi

# argument declarations
echo -e "# @parseArger-declarations";
for pos in "${_arg_pos[@]}"; do
	eval "$SCRIPT_ROOT_DIR/pos/declaration $pos";
done
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/declaration $opt";
done
for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/declaration $flag";
done
# generating parsing function
echo "# @parseArger-declarations-end

# @parseArger-parsing
die()
{
	local _ret=\"\${2:-1}\"
	test \"\${_PRINT_HELP:-no}\" = yes && print_help >&2
	echo \"\$1\" >&2
	exit \"\${_ret}\"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option=\"\${1:0:1}\"
	test \"\$all_short_options\" = \"\${all_short_options/\$first_option/}\" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();"

# variable initialisation
for pos in "${_arg_pos[@]}"; do
	eval "$SCRIPT_ROOT_DIR/pos/init $pos";
done
echo "# OPTIONALS ARGUMENTS"
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/init $opt";
done
echo "# FLAGS"
for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/init $flag";
done
if [ "$_arg_leftovers" != "off" ]; then
	echo -e "# LEFTOVERS
_arg_$_arg_leftovers_name=()";
fi

# help
echo -e "

print_help()
{
	echo -e \"$_arg_help_message:\"";
# help examples
posexample="";
for pos in "${_arg_pos[@]}"; do
	opCh="<";
	clCh=">";
	if [[ $pos =~ "--optional" ]]; then
		opCh="[";
		clCh="]";
	fi
	posexample+=" ${opCh}$(echo "$pos" | head -n1 | cut -d " " -f1)${clCh}";
	eval "$SCRIPT_ROOT_DIR/pos/help $pos";
done
optexample="";
for opt in "${_arg_opt[@]}"; do
	optexample+=" [--$(echo "$opt" | head -n1 | cut -d " " -f1) <value>]";
	eval "$SCRIPT_ROOT_DIR/opt/help $opt";
done
flagexample="";
for flag in "${_arg_flag[@]}"; do
	flagexample+=" [--[no-]$(echo "$flag" | head -n1 | cut -d " " -f1)]";
	eval "$SCRIPT_ROOT_DIR/flag/help $flag";
done

# actual parsing
echo -e "\techo -e \"Usage :\n\t\$0${posexample}${optexample}${flagexample}\"
}

parse_commandline()
{
	_positionals_count=0
	while test \$# -gt 0
	do
		_key=\"\$1\"
		case \"\$_key\" in";
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/parser $opt" | sed -e 's/^/\t\t\t/';
done

for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/parser $flag" | sed -e 's/^/\t\t\t/';
done

"$SCRIPT_ROOT_DIR/help/parser" "${helpDecArg[@]}" | sed -e 's/^/\t\t\t/';

echo -e "\t\t\t*)
				_last_positional=\"\$1\"
				_positionals+=(\"\$_last_positional\")
				_positionals_count=\$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=\"${reqPos[*]}\"";

if [ "$_arg_leftovers" == "off" ]; then
	echo -e "	test \"\${_positionals_count}\" -le ${maxPos} || _PRINT_HELP=yes die \"FATAL ERROR: There were spurious positional arguments --- we expect at most $maxPos (namely: \$_required_args_string), but got \${_positionals_count} (the last one was: '\${_last_positional}').\" 1";
fi

	echo -e "	test \"\${_positionals_count}\" -ge ${minPos} || _PRINT_HELP=yes die \"FATAL ERROR: Not enough positional arguments - we require at least $minPos (namely: \$_required_args_string), but got only \${_positionals_count}.\" 1
}


assign_positional_args()
{
	local _positional_name _shift_for=\$1;
	_positional_names=\"$(for pos in "${posArgNames[@]}"; do printf "_arg_%s " "$pos";done;)\";";

if [ "$_arg_leftovers" != "off" ]; then
	echo -e "	_leftovers_count=\$((\${#_positionals[@]} - ${#_arg_pos[@]}))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names=\"\$_positional_names _arg_leftovers[\$((ii + 0))]\";
	done
";
fi

	echo -e "	shift \"\$_shift_for\"
	for _positional_name in \${_positional_names};do
		test \$# -gt 0 || break;";
	if [ "$_arg_leftovers" == "off" ]; then
		echo "		eval \"if [ \\\"\\\$_one_of\${_positional_name}\\\" != \\\"\\\" ];then [[ \\\"\\\${_one_of\${_positional_name}[*]}\\\" =~ \\\"\\\${1}\\\" ]];fi\" || die \"\${_positional_name} must be one of: \$(eval \"echo \\\"\\\${_one_of\${_positional_name}[*]}\\\"\")\" 1";
	else
		echo "		if ! [[ \"\$_positional_name\" =~ \"_arg_$_arg_leftovers_name\" ]];then
			eval \"if [ \\\"\\\$_one_of\${_positional_name}\\\" != \\\"\\\" ];then [[ \\\"\\\${_one_of\${_positional_name}[*]}\\\" =~ \\\"\\\${1}\\\" ]];fi\" || die \"\${_positional_name} must be one of: \$(eval \"echo \\\"\\\${_one_of\${_positional_name}[*]}\\\"\")\" 1
		fi";
	fi
	echo -e "eval \"\$_positional_name=\\\${1}\" || die \"Error during argument parsing, possibly an Argbash bug.\" 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo \"DEBUG: \$0 \$@\";
	";
posI=0;
for pos in "${posArgNames[@]}"; do
	echo "	echo -e \"\t${posNames[$posI]}: \${_arg_${pos}}\";";
	posI=$((posI+1));
done
posI=0;
for opt in "${optArgNames[@]}"; do
	echo "	echo -e \"\t${optNames[$posI]}: \${_arg_${opt}}\";";
	posI=$((posI+1));
done
posI=0;
for flag in "${flagArgNames[@]}"; do
	echo "	echo -e \"\t${flagNames[$posI]}: \${_arg_${flag}}\";";
	posI=$((posI+1));
done
if [ "$_arg_leftovers" != "off" ]; then
	echo "	echo -e \"\t${_arg_leftovers_name}: \${_arg_${_arg_leftovers_name}[*]}\";";
fi
echo -e "
}

on_interrupt() {
	die "Process aborted!" 130;
}

parse_commandline \"\$@\";
handle_passed_args_count;
assign_positional_args 1 \"\${_positionals[@]}\";
trap on_interrupt INT;


# @parseArger-parsing-end
# print_debug \"\$@\"
# @parseArger-end";

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
