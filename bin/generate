#!/bin/bash
# @parseArger-begin
# @parseArger-help "generate a parseArger script" --option "help" --short-option "h"
# @parseArger-version "0.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger opt pos "positional argument declaration" --short p --repeat
# @parseArger opt opt "optional arg declaration" --short o --repeat
# @parseArger opt flag "flag declaration" --short f --repeat
# @parseArger opt set "declare var" --short s --repeat
# @parseArger opt source "file to source" --short l --repeat
# @parseArger opt help-message "help message for the command" --short m --default-value "I send an SOS to the world"
# @parseArger opt help-option "help option trigger"
# @parseArger opt help-short-option "short help option"
# @parseArger opt leftovers-name "extra arguments variable name" --default-value "leftovers"
# @parseArger opt use-shebang "shebang executable" --default-value "/bin/bash"
# @parseArger opt set-version "set version number"
# @parseArger opt version-opt-name "version option name" --default-value "version"
# @parseArger opt version-short-option "version short option name" --default-value "v"
# @parseArger opt die-fn-name "die function name" --default-value "die"
# @parseArger opt log-fn-name "log function name" --default-value "log"
# @parseArger opt verbose-opt-name "verbose option name" --default-value "verbose"
# @parseArger opt verbose-level "default verbose level" --default-value "0"
# @parseArger flag leftovers "accept extra arguments"
# @parseArger flag bang "include shebang" --on
# @parseArger flag version-opt "generate version opt handling" --on
# @parseArger flag use-verbose "generate verbose level parser" --on
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo -e "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_pos=()
_arg_opt=()
_arg_flag=()
_arg_set=()
_arg_source=()
_arg_help_message="I send an SOS to the world"
_arg_help_option=
_arg_help_short_option=
_arg_leftovers_name="leftovers"
_arg_use_shebang="/bin/bash"
_arg_set_version=
_arg_version_opt_name="version"
_arg_version_short_option="v"
_arg_die_fn_name="die"
_arg_log_fn_name="log"
_arg_verbose_opt_name="verbose"
_arg_verbose_level="0"
# FLAGS
_arg_leftovers="off"
_arg_bang="on"
_arg_version_opt="on"
_arg_use_verbose="on"
_verbose_level="0";



print_help()
{

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "generate a parseArger script:"
	echo -e "	-p, --pos <pos>: positional argument declaration, repeatable"
	echo -e "	-o, --opt <opt>: optional arg declaration, repeatable"
	echo -e "	-f, --flag <flag>: flag declaration, repeatable"
	echo -e "	-s, --set <set>: declare var, repeatable"
	echo -e "	-l, --source <source>: file to source, repeatable"
	echo -e "	-m, --help-message <help-message>: help message for the command [default: ' I send an SOS to the world ']"
	echo -e "	--help-option <help-option>: help option trigger"
	echo -e "	--help-short-option <help-short-option>: short help option"
	echo -e "	--leftovers-name <leftovers-name>: extra arguments variable name [default: ' leftovers ']"
	echo -e "	--use-shebang <use-shebang>: shebang executable [default: ' /bin/bash ']"
	echo -e "	--set-version <set-version>: set version number"
	echo -e "	--version-opt-name <version-opt-name>: version option name [default: ' version ']"
	echo -e "	--version-short-option <version-short-option>: version short option name [default: ' v ']"
	echo -e "	--die-fn-name <die-fn-name>: die function name [default: ' die ']"
	echo -e "	--log-fn-name <log-fn-name>: log function name [default: ' log ']"
	echo -e "	--verbose-opt-name <verbose-opt-name>: verbose option name [default: ' verbose ']"
	echo -e "	--verbose-level <verbose-level>: default verbose level [default: ' 0 ']"
	echo -e "	--leftovers|--no-leftovers: accept extra arguments"
	echo -e "	--bang|--no-bang: include shebang, on by default (use --no-bang to turn it off)"
	echo -e "	--version-opt|--no-version-opt: generate version opt handling, on by default (use --no-version-opt to turn it off)"
	echo -e "	--use-verbose|--no-use-verbose: generate verbose level parser, on by default (use --no-use-verbose to turn it off)"
	echo -e "Usage :
	$0 [--pos <value>] [--opt <value>] [--flag <value>] [--set <value>] [--source <value>] [--help-message <value>] [--help-option <value>] [--help-short-option <value>] [--leftovers-name <value>] [--use-shebang <value>] [--set-version <value>] [--version-opt-name <value>] [--version-short-option <value>] [--die-fn-name <value>] [--log-fn-name <value>] [--verbose-opt-name <value>] [--verbose-level <value>] [--[no-]leftovers] [--[no-]bang] [--[no-]version-opt] [--[no-]use-verbose]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--pos)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_pos+=("$2")
				shift
				;;
			--pos=*)
				_arg_pos+=("${_key##--pos=}")
				;;
			-p*)
				_arg_pos+=("${_key##-p}")
				;;
			
			-o|--opt)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_opt+=("$2")
				shift
				;;
			--opt=*)
				_arg_opt+=("${_key##--opt=}")
				;;
			-o*)
				_arg_opt+=("${_key##-o}")
				;;
			
			-f|--flag)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_flag+=("$2")
				shift
				;;
			--flag=*)
				_arg_flag+=("${_key##--flag=}")
				;;
			-f*)
				_arg_flag+=("${_key##-f}")
				;;
			
			-s|--set)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set+=("$2")
				shift
				;;
			--set=*)
				_arg_set+=("${_key##--set=}")
				;;
			-s*)
				_arg_set+=("${_key##-s}")
				;;
			
			-l|--source)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_source+=("$2")
				shift
				;;
			--source=*)
				_arg_source+=("${_key##--source=}")
				;;
			-l*)
				_arg_source+=("${_key##-l}")
				;;
			
			-m|--help-message)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_help_message="$2"
				shift
				;;
			--help-message=*)
				_arg_help_message="${_key##--help-message=}"
				;;
			-m*)
				_arg_help_message="${_key##-m}"
				;;
			
			--help-option)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_help_option="$2"
				shift
				;;
			--help-option=*)
				_arg_help_option="${_key##--help-option=}"
				;;
			
			--help-short-option)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_help_short_option="$2"
				shift
				;;
			--help-short-option=*)
				_arg_help_short_option="${_key##--help-short-option=}"
				;;
			
			--leftovers-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_leftovers_name="$2"
				shift
				;;
			--leftovers-name=*)
				_arg_leftovers_name="${_key##--leftovers-name=}"
				;;
			
			--use-shebang)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_use_shebang="$2"
				shift
				;;
			--use-shebang=*)
				_arg_use_shebang="${_key##--use-shebang=}"
				;;
			
			--set-version)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_set_version="$2"
				shift
				;;
			--set-version=*)
				_arg_set_version="${_key##--set-version=}"
				;;
			
			--version-opt-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_version_opt_name="$2"
				shift
				;;
			--version-opt-name=*)
				_arg_version_opt_name="${_key##--version-opt-name=}"
				;;
			
			--version-short-option)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_version_short_option="$2"
				shift
				;;
			--version-short-option=*)
				_arg_version_short_option="${_key##--version-short-option=}"
				;;
			
			--die-fn-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_die_fn_name="$2"
				shift
				;;
			--die-fn-name=*)
				_arg_die_fn_name="${_key##--die-fn-name=}"
				;;
			
			--log-fn-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_log_fn_name="$2"
				shift
				;;
			--log-fn-name=*)
				_arg_log_fn_name="${_key##--log-fn-name=}"
				;;
			
			--verbose-opt-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_verbose_opt_name="$2"
				shift
				;;
			--verbose-opt-name=*)
				_arg_verbose_opt_name="${_key##--verbose-opt-name=}"
				;;
			
			--verbose-level)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_verbose_level="$2"
				shift
				;;
			--verbose-level=*)
				_arg_verbose_level="${_key##--verbose-level=}"
				;;
			
			--leftovers)
				_arg_leftovers="on"
				;;
			--no-leftovers)
				_arg_leftovers="off"
				;;
			--bang)
				_arg_bang="on"
				;;
			--no-bang)
				_arg_bang="off"
				;;
			--version-opt)
				_arg_version_opt="on"
				;;
			--no-version-opt)
				_arg_version_opt="off"
				;;
			--use-verbose)
				_arg_use_verbose="on"
				;;
			--no-use-verbose)
				_arg_use_verbose="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tpos: ${_arg_pos[*]}";
	echo -e "\topt: ${_arg_opt[*]}";
	echo -e "\tflag: ${_arg_flag[*]}";
	echo -e "\tset: ${_arg_set[*]}";
	echo -e "\tsource: ${_arg_source[*]}";
	echo -e "\thelp-message: ${_arg_help_message}";
	echo -e "\thelp-option: ${_arg_help_option}";
	echo -e "\thelp-short-option: ${_arg_help_short_option}";
	echo -e "\tleftovers-name: ${_arg_leftovers_name}";
	echo -e "\tuse-shebang: ${_arg_use_shebang}";
	echo -e "\tset-version: ${_arg_set_version}";
	echo -e "\tversion-opt-name: ${_arg_version_opt_name}";
	echo -e "\tversion-short-option: ${_arg_version_short_option}";
	echo -e "\tdie-fn-name: ${_arg_die_fn_name}";
	echo -e "\tlog-fn-name: ${_arg_log_fn_name}";
	echo -e "\tverbose-opt-name: ${_arg_verbose_opt_name}";
	echo -e "\tverbose-level: ${_arg_verbose_level}";
	echo -e "\tleftovers: ${_arg_leftovers}";
	echo -e "\tbang: ${_arg_bang}";
	echo -e "\tversion-opt: ${_arg_version_opt}";
	echo -e "\tuse-verbose: ${_arg_use_verbose}";

}

print_version()
{
	echo "0.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

SCRIPT_ROOT_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd -P
);

# var definitions
minPos="${#_arg_pos[@]}";
maxPos="${#_arg_pos[@]}";
reqPos=();
posNames=();
posArgNames=();
optNames=();
optArgNames=();
flagNames=();
flagArgNames=();
paCmtTrgr="@parse";
paCmtTrgr+="Arger-";

posI=0;
for pos in "${_arg_pos[@]}"; do
	posNames+=("$(echo "$pos" | head -n1 | cut -d " " -f1)");
	posArgNames+=("$(echo "$pos" | head -n1 | cut -d " " -f1 | sed 's/-/_/')");
	if [[ $pos =~ "--optional" ]]; then
		minPos=$((minPos-1));
	else
		reqPos+=("${posNames[$posI]}");
	fi
	# TODO
	# [ ] extract min-repeat value
	if [[ $pos =~ "--min-repeat" ]]; then
		minPos=$((minPos+1));
	fi
	# TODO
	# [ ] extract max-repeat value
	if [[ $pos =~ "--max-repeat" ]]; then
		maxPos=$((maxPos+1));
	fi
	posI=$((posI+1));
done
for opt in "${_arg_opt[@]}"; do
	optNames+=("$(echo "$opt" | head -n1 | cut -d " " -f1)");
	optArgNames+=("$(echo "$opt" | head -n1 | cut -d " " -f1 | sed 's/-/_/g')");
done
for flag in "${_arg_flag[@]}"; do
	flagNames+=("$(echo "$flag" | head -n1 | cut -d " " -f1)");
	flagArgNames+=("$(echo "$flag" | head -n1 | cut -d " " -f1 | sed 's/-/_/g')");
done

# generate shebang
if [ "$_arg_bang" != "off" ]; then
	echo "#!${_arg_use_shebang}";
fi

# parsing
echo -e "# ${paCmtTrgr}begin";

# help
helpDecArg=("$_arg_help_message");
if [ "$_arg_help_option" != "" ]; then
	helpDecArg+=("--option" "$_arg_help_option");
fi
if [ "$_arg_help_short_option" != "" ]; then
	helpDecArg+=("--short-option" "$_arg_help_short_option");
fi
"$SCRIPT_ROOT_DIR/help/declaration" "${helpDecArg[@]}";

# version
if [ "$_arg_set_version" != "" ]; then
	versionDecArg=("$_arg_set_version");
	if [ "$_arg_version_opt_name" != "" ]; then
		versionDecArg+=("--option" "$_arg_version_opt_name");
	fi
	if [ "$_arg_version_short_option" != "" ]; then
		versionDecArg+=("--short-option" "$_arg_version_short_option");
	fi
	"$SCRIPT_ROOT_DIR/version/declaration" "${versionDecArg[@]}";
else 
	versionDecArg=("");
fi

# verbose
if [ "$_arg_use_verbose" != "off" ]; then
	verboseDecArg=("--option" "$_arg_verbose_opt_name" --level "$_arg_verbose_level" --log-fn-name "$_arg_log_fn_name");
	"$SCRIPT_ROOT_DIR/verbose/declaration" "${verboseDecArg[@]}";
else 
	verboseDecArg=("");
fi

# setting user variables
if [ "${#_arg_set[@]}" -gt 0 ]; then
	for _set in "${_arg_set[@]}"; do
		echo "# ${paCmtTrgr}set $_set";
		echo -e "$_set";
	done
fi

# sourcing user files
if [ "${#_arg_source[@]}" -gt 0 ]; then
	for _source in "${_arg_source[@]}"; do
		echo "# ${paCmtTrgr}source $_source";
		echo -e "source \"$_source\";";
	done
fi

# leftovers
if [ "$_arg_leftovers" == "on" ]; then
	echo -e "# ${paCmtTrgr}leftovers $_arg_leftovers_name";
fi

hasSubCmd="1";

# argument declarations
echo -e "# ${paCmtTrgr}declarations";
for pos in "${_arg_pos[@]}"; do
	if [[ "$hasSubCmd" == "1" ]]; then
		hasSubCmd=$(eval "$SCRIPT_ROOT_DIR/pos/is-subcmd $pos")
	fi
	eval "$SCRIPT_ROOT_DIR/pos/declaration $pos";
done
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/declaration $opt";
done
for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/declaration $flag";
done

# generating parsing function
echo "# ${paCmtTrgr}declarations-end

# ${paCmtTrgr}utils
_helpHasBeenPrinted=1;
# ${paCmtTrgr}utils-end

# ${paCmtTrgr}parsing
die()
{
	local _ret=\"\${2:-1}\"
	test \"\${_PRINT_HELP:-no}\" = yes && print_help >&2
	echo -e \"\$1\" >&2
	exit \"\${_ret}\"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option=\"\${1:0:1}\"
	test \"\$all_short_options\" = \"\${all_short_options/\$first_option/}\" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();"

# variable initialisation
for pos in "${_arg_pos[@]}"; do
	eval "$SCRIPT_ROOT_DIR/pos/init $pos";
done
echo "# OPTIONALS ARGUMENTS"
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/init $opt";
done
echo "# FLAGS"
for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/init $flag";
done
if [ "$_arg_leftovers" != "off" ]; then
	echo -e "# LEFTOVERS
_arg_$_arg_leftovers_name=()";
fi
# verbose level init
if [ "$_arg_use_verbose" != "off" ]; then
	"$SCRIPT_ROOT_DIR/verbose/init" "${verboseDecArg[@]}";
fi

# help
# TODO use hasSubCmd,
# 	if so, call subCmd help (how ?)
echo -e "

print_help()
{";
if [ "$hasSubCmd" == "0" ]; then
	echo -e "
	if [ \"\${#_positionals[@]}\" -ge 1 ]; then
		echo \"\$0 sub command help
	\"
	else
	";
fi
echo -e "
	if [[ \"\$_helpHasBeenPrinted\" == \"1\" ]]; then
		_helpHasBeenPrinted=0;
		echo -e \"$_arg_help_message:\"";
# help examples
posexample="";
for pos in "${_arg_pos[@]}"; do
	opCh="<";
	clCh=">";
	if [[ $pos =~ "--optional" ]]; then
		opCh="[";
		clCh="]";
	fi
	posexample+=" ${opCh}$(echo "$pos" | head -n1 | cut -d " " -f1)${clCh}";
	eval "$SCRIPT_ROOT_DIR/pos/help $pos";
done
optexample="";
for opt in "${_arg_opt[@]}"; do
	optexample+=" [--$(echo "$opt" | head -n1 | cut -d " " -f1) <value>]";
	eval "$SCRIPT_ROOT_DIR/opt/help $opt";
done
flagexample="";
for flag in "${_arg_flag[@]}"; do
	flagexample+=" [--[no-]$(echo "$flag" | head -n1 | cut -d " " -f1)]";
	eval "$SCRIPT_ROOT_DIR/flag/help $flag";
done

echo -e "\techo -e \"Usage :\n\t\$0${posexample}${optexample}${flagexample}\";
	fi";
if [ "$hasSubCmd" == "0" ]; then
	echo -e "
	fi
	";
fi
echo -e "
}
";
# verbose log function
if [ "$_arg_use_verbose" != "off" ]; then
	"$SCRIPT_ROOT_DIR/verbose/logger" "${verboseDecArg[@]}";
fi

# actual parsing
echo -e "
parse_commandline()
{
	_positionals_count=0
	while test \$# -gt 0
	do
		_key=\"\$1\"
		case \"\$_key\" in";
for opt in "${_arg_opt[@]}"; do
	eval "$SCRIPT_ROOT_DIR/opt/parser $opt" | sed -e 's/^/\t\t\t/';
done

for flag in "${_arg_flag[@]}"; do
	eval "$SCRIPT_ROOT_DIR/flag/parser $flag" | sed -e 's/^/\t\t\t/';
done

if [[ "$hasSubCmd" == "0" ]]; then
	helpDecArg+=("--has-subcommand")
fi
"$SCRIPT_ROOT_DIR/help/parser" "${helpDecArg[@]}" | sed -e 's/^/\t\t\t/';
"$SCRIPT_ROOT_DIR/version/parser" "${versionDecArg[@]}" | sed -e 's/^/\t\t\t/';

echo -e "\t\t\t*)
				_last_positional=\"\$1\"
				_positionals+=(\"\$_last_positional\")
				_positionals_count=\$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=\"${reqPos[*]}\"";

if [ "$_arg_leftovers" == "off" ]; then
	echo -e "	if [ \"\${_positionals_count}\" -gt ${maxPos} ] && [ \"\$_helpHasBeenPrinted\" == \"1\" ];then
		_PRINT_HELP=yes die \"FATAL ERROR: There were spurious positional arguments --- we expect at most $maxPos (namely: \$_required_args_string), but got \${_positionals_count} (the last one was: '\${_last_positional}').\\\\n\\\\t\${_positionals[*]}\" 1
	fi";
fi

	echo -e "	if [ \"\${_positionals_count}\" -lt ${minPos} ] && [ \"\$_helpHasBeenPrinted\" == \"1\" ];then
		_PRINT_HELP=yes die \"FATAL ERROR: Not enough positional arguments - we require at least $minPos (namely: \$_required_args_string), but got only \${_positionals_count}.\\n\\t\${_positionals[*]}\" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=\$1;
	_positional_names=\"$(for pos in "${posArgNames[@]}"; do printf "_arg_%s " "$pos";done;)\";";

if [ "$_arg_leftovers" != "off" ]; then
	echo -e "	_leftovers_count=\$((\${#_positionals[@]} - ${#_arg_pos[@]}))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names=\"\$_positional_names _arg_leftovers[\$((ii + 0))]\";
	done
";
fi

	echo -e "	shift \"\$_shift_for\"
	for _positional_name in \${_positional_names};do
		test \$# -gt 0 || break;";
	if [ "$_arg_leftovers" == "off" ]; then
		echo "		eval \"if [ \\\"\\\$_one_of\${_positional_name}\\\" != \\\"\\\" ];then [[ \\\"\\\${_one_of\${_positional_name}[*]}\\\" =~ \\\"\\\${1}\\\" ]];fi\" || die \"\${_positional_name} must be one of: \$(eval \"echo \\\"\\\${_one_of\${_positional_name}[*]}\\\"\")\" 1";
	else
		echo "		if ! [[ \"\$_positional_name\" =~ \"_arg_$_arg_leftovers_name\" ]];then
			eval \"if [ \\\"\\\$_one_of\${_positional_name}\\\" != \\\"\\\" ];then [[ \\\"\\\${_one_of\${_positional_name}[*]}\\\" =~ \\\"\\\${1}\\\" ]];fi\" || die \"\${_positional_name} must be one of: \$(eval \"echo \\\"\\\${_one_of\${_positional_name}[*]}\\\"\")\" 1
		fi";
	fi
	echo -e "eval \"\$_positional_name=\\\${1}\" || die \"Error during argument parsing, possibly an ParseArger bug.\" 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo \"DEBUG: \$0 \$@\";
	";
posI=0;
for pos in "${posArgNames[@]}"; do
	echo "	echo -e \"\t${posNames[$posI]}: \${_arg_${pos}}\";";
	posI=$((posI+1));
done
posI=0;
for opt in "${optArgNames[@]}"; do
	forRepeating=$(eval "$SCRIPT_ROOT_DIR/opt/is-repeating ${_arg_opt[posI]}");
	if [ "$forRepeating" == "0" ];then
		forRepeating="[*]";
	else
		forRepeating="";
	fi
	echo "	echo -e \"\t${optNames[$posI]}: \${_arg_${opt}${forRepeating}}\";";
	posI=$((posI+1));
done
posI=0;
for flag in "${flagArgNames[@]}"; do
	echo "	echo -e \"\t${flagNames[$posI]}: \${_arg_${flag}}\";";
	posI=$((posI+1));
done
if [ "$_arg_leftovers" != "off" ]; then
	echo "	echo -e \"\t${_arg_leftovers_name}: \${_arg_${_arg_leftovers_name}[*]}\";";
fi
echo -e "
}

print_version()
{
	echo \"${_arg_set_version}\";
}

on_interrupt() {
	die "Process aborted!" 130;
}

parse_commandline \"\$@\";
handle_passed_args_count;
assign_positional_args 1 \"\${_positionals[@]}\";
trap on_interrupt INT;


# ${paCmtTrgr}parsing-end
# print_debug \"\$@\"
# ${paCmtTrgr}end";
