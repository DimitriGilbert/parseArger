#!/bin/bash
# @parseArger-begin
# @parseArger-help "standalone bash argument parsing framework" --option "help" --short-option "h"
# @parseArger-version "0.1" --option "version" --short-option "v"
# @parseArger-set export PARSEARGER_ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")";pwd -P);
export PARSEARGER_ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")";pwd -P);
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos target "what to do" --subcommand --one-of "parse" --one-of "generate" --one-of "document" --one-of "bulk-parse"
# @parseArger opt output "create file with command output at value"
# @parseArger flag prepend "add output on top of file"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo -e "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_target="";
_one_of_arg_target=("parse" "generate" "document" "bulk-parse" );
_arg_subcommand_arg="_arg_target";
# OPTIONALS ARGUMENTS
_arg_output=
# FLAGS
_arg_prepend="off"
# LEFTOVERS
_arg_leftovers=()


print_help()
{

	if [ "${#_positionals[@]}" -ge 1 ]; then
		echo "$0 sub command help
	"
	else
	

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "standalone bash argument parsing framework:"
	echo -e "	target: what to do [one of 'parse' 'generate' 'document' 'bulk-parse']"
	echo -e "	--output <output>: create file with command output at value"
	echo -e "	--prepend|--no-prepend: add output on top of file"
	echo -e "Usage :
	$0 <target> [--output <value>] [--[no-]prepend]";
	fi

	fi
	

}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--output)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			
			--prepend)
				_arg_prepend="on"
				;;
			--no-prepend)
				_arg_prepend="off"
				;;
			-h|--help)
				print_help;
				;;
			-h*)
				print_help;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="target"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_target ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
		fi
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\ttarget: ${_arg_target}";
	echo -e "\toutput: ${_arg_output}";
	echo -e "\tprepend: ${_arg_prepend}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "0.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ "$_arg_output" == "" ]; then
	if [ "$_arg_target" != "" ]; then
		"$PARSEARGER_ROOT_DIR/bin/$_arg_target" "${_arg_leftovers[@]}";
	fi
else
	output="$("$PARSEARGER_ROOT_DIR/bin/$_arg_target" "${_arg_leftovers[@]}")";
	
	if [ "$_arg_output" != "" ]; then
		if [[ -f "$_arg_output" ]]; then
			if [ "$_arg_prepend" == "on" ]; then
				output+=$(cat "$_arg_output");
			else
				output=$(cat "$_arg_output")$output;
			fi	
		fi
		echo -e "${output}" > "$_arg_output";
		chmod +x "$_arg_output";
	fi
fi  
