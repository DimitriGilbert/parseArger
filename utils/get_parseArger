#!/bin/bash
# @parseArger-begin
# @parseArger-help "get parseArger" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger opt branch "version to install" --short b --alias tag --alias install-version
# @parseArger opt install-directory "where to install" --complete "directory"
# @parseArger opt install-file "rc files to install to, forces install" --repeat
# @parseArger flag install "install in bashrc" --short i
# @parseArger flag remove-installer "remove install script itself" --alias rm
# @parseArger flag ssh "clone using ssh"
# @parseArger flag zip "install using zip archive, not recommended"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_branch=
_arg_install_directory=
_arg_install_file=()
# FLAGS
_arg_install="off"
_arg_remove_installer="off"
_arg_ssh="off"
_arg_zip="off"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "get parseArger:"
	echo -e "	-b, --branch|--tag|--install-version <branch>: version to install"
	echo -e "	--install-directory <install-directory>: where to install"
	echo -e "	--install-file <install-file>: rc files to install to, forces install, repeatable"
	echo -e "	-i|--install|--no-install: install in bashrc"
	echo -e "	--remove-installer|--no-remove-installer: remove install script itself
		aliases: --rm,"
	echo -e "	--ssh|--no-ssh: clone using ssh"
	echo -e "	--zip|--no-zip: install using zip archive, not recommended"
	echo -e "Usage :
	$0 [--branch <value>] [--install-directory <value>] [--install-file <value>] [--[no-]install] [--[no-]remove-installer] [--[no-]ssh] [--[no-]zip]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-b|--install-version|--tag|--branch)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_branch="$2"
				shift
				;;
			--branch=*)
				_arg_branch="${_key##--branch=}"
				;;
			--tag=*)
				_arg_branch="${_key##--tag=}"
				;;
			--install-version=*)
				_arg_branch="${_key##--install-version=}"
				;;
			-b*)
				_arg_branch="${_key##-b}"
				;;
			
			--install-directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_install_directory="$2"
				shift
				;;
			--install-directory=*)
				_arg_install_directory="${_key##--install-directory=}"
				;;
			
			--install-file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_install_file+=("$2")
				shift
				;;
			--install-file=*)
				_arg_install_file+=("${_key##--install-file=}")
				;;
			
			-i|--install)
				_arg_install="on"
				;;
			--no-install)
				_arg_install="off"
				;;
			--remove-installer|--rm)
				_arg_remove_installer="on"
				;;
			--no-remove-installer)
				_arg_remove_installer="off"
				;;
			--ssh)
				_arg_ssh="on"
				;;
			--no-ssh)
				_arg_ssh="off"
				;;
			--zip)
				_arg_zip="on"
				;;
			--no-zip)
				_arg_zip="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tbranch: ${_arg_branch}";
	echo -e "\tinstall-directory: ${_arg_install_directory}";
	echo -e "\tinstall-file: ${_arg_install_file[*]}";
	echo -e "\tinstall: ${_arg_install}";
	echo -e "\tremove-installer: ${_arg_remove_installer}";
	echo -e "\tssh: ${_arg_ssh}";
	echo -e "\tzip: ${_arg_zip}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end
ecmd=();
mcmd=(chmod "+x" "-R");
if [ "$_arg_zip" != "on" ] && [ "$(command -v git)" ]; then
	ecmd+=(git clone);

	if [ "$_arg_ssh" == "on" ]; then
		ecmd+=("git@github.com:DimitriGilbert/parseArger.git");
	else
		ecmd+=("https://github.com/DimitriGilbert/parseArger.git");
	fi

	if [ "$_arg_branch" != "" ]; then
		ecmd+=(-b "$_arg_branch");
	fi

	if [ "$_arg_install_directory" != "" ]; then
		ecmd+=("$_arg_install_directory");
		mcmd+=("$_arg_install_directory/parseArger" "$_arg_install_directory/utils" "$_arg_install_directory/bin");
	else
		mcmd+=("parseArger/parseArger" "parseArger/utils" "parseArger/bin");
	fi
else
	if [ "$_arg_branch" == "" ]; then
		_arg_branch="main";
	fi
	_arg_zip="on";
	log "Install using zip, it is not recommended" -1;
	ecmd+=(curl "https://github.com/DimitriGilbert/parseArger/archive/refs/heads/${_arg_branch}.zip" -LJO);
	zcmd=(unzip -qq);
	zcmd2=(mv);

	if [ "$_arg_install_directory" != "" ]; then
		zcmd+=(-d "/tmp");
		mcmd+=("$_arg_install_directory/parseArger" "$_arg_install_directory/utils" "$_arg_install_directory/bin");
		zcmd2+=("/tmp/parseArger-${_arg_branch}" "$_arg_install_directory");
	else
		mcmd+=("parseArger/parseArger" "parseArger/utils" "parseArger/bin");
		zcmd2+=("parseArger-${_arg_branch}" "parseArger");
	fi
	zcmd+=( "parseArger-${_arg_branch}.zip" );
fi

log "${ecmd[*]}" 1;
"${ecmd[@]}"

if [ "$_arg_zip" == "on" ]; then
	log "${zcmd[*]}" 1;
	"${zcmd[@]}";
	log "${zcmd2[*]}" 1;
	"${zcmd2[@]}";
	rm "parseArger-${_arg_branch}.zip";
fi

log "${mcmd[*]}" 1;
"${mcmd[@]}"

if [ "$_arg_install" == "on" ] || [ "${#_arg_install_file[@]}" -gt 0 ]; then
	icmd=("utils/install" --verbose 1);
	if [ "${#_arg_install_file[@]}" -gt 0 ]; then
		for ifile in "${_arg_install_file[@]}"; do
			icmd+=("--shell-rc-file" "$ifile");
		done
	fi
	log "${icmd[*]}" 1;

	if [ "$_arg_install_directory" != "" ]; then
		cd "${_arg_install_directory}";
	else
		cd parseArger;
	fi
	"${icmd[@]}";
	cd -;
fi
