#!/bin/bash
# @parseArger-begin
# @parseArger-help "Install parseArger" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-declarations
# @parseArger opt shell-rc-file "where to put the source directive" --default-value "/home/didi/.bashrc" --repeat --alias install-file
# @parseArger flag comment "add parsearger comment" --on
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_shell_rc_file=("/home/didi/.bashrc" )
# FLAGS
_arg_comment="on"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Install parseArger:"
	echo -e "	--shell-rc-file|--install-file <shell-rc-file>: where to put the source directive, repeatable [default: '( /home/didi/.bashrc )']"
	echo -e "	--comment|--no-comment: add parsearger comment, on by default (use --no-comment to turn it off)"
	echo -e "Usage :
	$0 [--shell-rc-file <value>] [--[no-]comment]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--install-file|--shell-rc-file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_shell_rc_file+=("$2")
				shift
				;;
			--shell-rc-file=*)
				_arg_shell_rc_file+=("${_key##--shell-rc-file=}")
				;;
			--install-file=*)
				_arg_shell_rc_file+=("${_key##--install-file=}")
				;;
			
			--comment)
				_arg_comment="on"
				;;
			--no-comment)
				_arg_comment="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tshell-rc-file: ${_arg_shell_rc_file[*]}";
	echo -e "\tcomment: ${_arg_comment}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end
_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)"
output="\nexport PARSEARGER_DIR=\"$_dir\"
source ${_dir}/parseArger.rc";

if [ "$_arg_comment" != "off" ]; then
	output="\n# parseArger${output}";
fi

for _file in "${_arg_shell_rc_file[@]}"; do
	if [ -f "$_file" ]; then
		if ! grep -q "parseArger" "$_file"; then
			echo -e "$output" >> "$_file";
			log "parseArger installed in $_file" 1;
		else
			log "parseArger already installed in $_file" 1;
		fi
	else
		log "File $_file not found" -1;
	fi
done
